#include "stdio.h"
#include "malloc.h"
#include "string.h"
#define MAX 20
typedef struct TreeNode
{
	int weight;
	int parent;
	int lchild;
	int rchild;
}treeNode,HuffmanTree[MAX];
typedef struct CodeNode
{
	char ch;
	char bits[MAX];
}codeNode,HuffmanCode[MAX];

void SelectMin(HuffmanTree T,int g,int &s1,int &s2)
{
	int j,k,m,n,i;
	s1=1;
	s2=1;
	for(k=1;k<=g;k++)
	{
		if(T[k].parent==0)
		{
			s1=k;
			break;
		}
	}
	for(j=1;j<=g;j++)
	{
		if((T[j].weight<T[k].weight)&&(T[j].parent==0))
		{
		k=j;
		s1=j;
		}
	}
	for(m=1;m<=g;m++)
	{
		if((T[m].parent==0)&&(m!=s1))
		{
			s2=m;
			break;
		}
	}
	for(n=1;n<=g;n++)
	{
		if((T[n].weight<=T[m].weight) && (T[n].parent==0)&&(n!=s1))
			{
             m=n;
		    s2=n;
			}
	}
}
void CreateHuffmanTree(HuffmanTree T,int n)
{
	int i,p1,p2;
	int m = 2*n;
	for(i=1;i<=m;i++)
	{
		T[i].parent=0;
		T[i].lchild=0;
		T[i].rchild=0;
		T[i].weight=0;
	}
	
	printf("Enter the weight of the char please!\n");
	
	for(i=1;i<n+1;i++)
			scanf("%d",&T[i].weight);
			
		for(i=n+1;i<m;i++)
		{
			SelectMin(T,i-1,p1,p2);
			T[p1].parent=T[p2].parent=i;
			T[i].lchild=p1;
			T[i].rchild=p2;
			T[i].weight=T[p1].weight+T[p2].weight;
		}	
}
void HuffmanEncoding(HuffmanTree T,HuffmanCode H,int n)
{
	int c,p,i;
	char cd[n];
	int start;
	cd[n]='\0';
	printf("Enter the char which is equivalent to the frequency please\n");
	for(i=1;i<n+1;i++)
	{
		scanf(" %c",&H[i].ch);
		start=n;
		c=i;
		while((p=T[c].parent) > 0)
		{
			if(T[p].lchild==c)
			cd[--start]='0';
			else
			cd[--start]='1';
			c=p;
		}
		strcpy(H[i].bits,&cd[start]);
	}

}
int main()
{
	HuffmanTree T;
	int n;
	HuffmanCode H;
	printf("Enter the number of the huffmantree node please!");
	scanf("%d",&n);
	CreateHuffmanTree(T,n);
	HuffmanEncoding(T,H,n);
	printf("The encoding result is \n");
	for(int i=1;i<n+1;i++)
	{
		printf("%c\t",H[i].ch);
		printf("%s\n",&H[i].bits);
	}
}
